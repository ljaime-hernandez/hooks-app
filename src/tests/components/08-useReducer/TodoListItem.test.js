import { TodoListItem } from "../../../components/08-useReducer/TodoListItem";
import { demoTodos } from "../../fixtures/demoTodos";
import { shallow } from "enzyme";

/* to run this test:
1. run the 'npm install' command from the hooks-app folder 
2. run the 'npm install --save-dev enzyme' command (if you havent done so)
3. run the 'npm install --save-dev enzyme-to-json' command (if you havent done so)
4. run the 'npm install --save-dev @wojtekmaj/enzyme-adapter-react-17 --legacy-peer-deps' command (if you are using React 17 as i do)
5. run the 'npm install --save-dev @testing-library/react-hooks' command (if you havent done so)
6. make sure the setupTests.js file include the enzyme, enzyme-to-json and the react adapter libraries
7. run the command 'npm run test'
8. to have a clearer view of this single js test file, press p. then type the file name 'TodoListItem.test.js'
*/

describe('Tests on TodoItemList component', () => {

    // same arguments passed to the TodoList component, this time only
    // receiving one of the objects on the to-do array, also receiving 
    // a number generated by the previous component iteration for listing
    // purposes
    let handleDelete = jest.fn();
    let handleToggle = jest.fn();
    const index = 1;
    let wrapper = shallow(
            <TodoListItem
                todo={demoTodos[1]}
                index={index}
                handleToggle={handleToggle}
                handleDelete={handleDelete} />)

    beforeEach(() => {
        jest.clearAllMocks();
        wrapper = shallow(
            <TodoListItem
                todo={demoTodos[1]}
                index={index}
                handleToggle={handleToggle}
                handleDelete={handleDelete} />);
    });

        test('should render properly', () => {
            
            expect(wrapper).toMatchSnapshot();
        });

         test('should call handleDelete function', () => {

            // test of the click event using the todo object received from the
            // fixtures for test purposes
            wrapper.find('button').simulate('click');
            expect(handleDelete).toHaveBeenCalled();
            expect(handleDelete).toHaveBeenCalledWith(demoTodos[1].id);
        });
        
         test('should call handleToggle function', () => {
            
            // test of the click event using the todo object received from the
            // fixtures for test purposes
            wrapper.find('p').simulate('click');
            expect(handleToggle).toHaveBeenCalled();
            expect(handleToggle).toHaveBeenCalledWith(demoTodos[1].id);
        });

        test('should show text correctly', () => {
            
            // we use a javascript function for us to properly check if the text rendered in the
            // p element works accordingly to the information being sent
            expect(wrapper.find('p').text().trim()).toBe(`${demoTodos[1].id}. ${demoTodos[1].description}`);
        });

        test('should show class complete on p element if the done value is true', () => {
            
            const todo = demoTodos[0];
            todo.done = true;

            wrapper = shallow(
                <TodoListItem
                    todo={todo}
                />);

            // we test the condition inside the TodoListItem component which should change the class
            // of the p element if the done attribute is set to true on its click event
            expect(wrapper.find('p').hasClass('complete')).toBe(true);
        });
})
